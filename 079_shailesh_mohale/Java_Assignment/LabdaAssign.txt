package p1;


/*interface emp{
	
	String wish(String name);
	
}
public class Lambda {

	public static void main(String[] args) {
		emp ref=(name)->{
			
			return "hello everyone";
			
		};
		System.out.println(ref.wish("shailesh"));

	}

}*/

//define a functional interface "First" with an abstract method "void disp1()" , default method "void disp2()" and a static method "void disp3()"
/*
interface first{
	
	void disp1();
	default void disp2() {
		
		
	}
	static void disp3() {
		
		
	}
	
}
public class Lambda{
	
	public static void main(String args[]) {
		
		//Lambda l= new Lambda();
		first ref=()->{
			
		};
		ref.disp1();
		ref.disp2();
		first.disp3();
		
		
	}
	
}
*/
//2) define a functional interface "Second" with an abstract method "void disp4()".

//define a class Demo with main function.
//inside main function create two implementations of "Second" using lambda expression and display their names.

/*
interface Second{
	
	void disp4();
}

public class Lambda{
	public static void main(String args[]) {
	Second ref=()->{
		
	};
	ref.disp4();
	System.out.println(ref.getClass().getName());
	
	Second ref1=()->{
	
	};
	ref1.disp4();
	System.out.println(ref.getClass().getName());
	}	
}
*/
//

//3) define a functional interface "MyInterface" with an abstract method "void fun()"
//
//define a class Demo with two functions "static void perform" and main.
//
//from main function pass lambda expression, collect it in "perform" method and invoke "fun()" function.


/*
interface Myinterface{
	
	void fun();
}
public class Lambda{
	
static void perform(Myinterface ref) {
		
		ref.fun();
	}
	public static void main(String args[]) {
	
		Lambda.perform(()->{ System.out.println("hello");});
			
		
	}
}
*/
//4>
//define a functional interface "Calculator" with an abstract method "int multiply(int a,int b)"
//define a class "CalcDemo" with main method.
//inside main using lambda create an implementation of "Calculator" , invoke "multiply()" method and display its result.
/*
interface Calculator{
	
	int Multiply(int a,int b);
	
}

public class Lambda{
	
	public static void main(String args[]) {
		
		Calculator c=(a,b)->{
			return a*b;		
		};
		System.out.println(c.Multiply(10, 10));
		
	}
}
*/

//5>

//5) define a class "Display" with "void disp" method. inside this method display values from 1 to 10.
//
//create an implementation of "Runnable" using lambda expression which will invoke "disp()" method of "Display" class.
//
//create 2 threads and pass above created "Runnable" implementation to these threads.
//make sure while one thread is executing other thread will not interfere.

/*
class display {
	
	synchronized void display() {
		
		for(int i=1;i<11;i++) {
			
			System.out.println(i);
		}
	}
	

}
public class Lambda{
	public static void main(String args[]) {
		display d1= new display();
		Runnable ref=()->{
		d1.display();
			
		};
		
		Thread t1= new Thread(ref,"first");
		Thread t2= new Thread(ref,"second");
		t1.start();
		t2.start();
		System.out.println(Thread.currentThread().getName());
	}
	
}

*/
